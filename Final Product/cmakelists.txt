cmake_minimum_required(VERSION 3.10)
project(ProjectGaming)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find all source and header files
file(GLOB_RECURSE SOURCES src/*.cpp)
file(GLOB_RECURSE HEADERS include/*.hpp include/*.h)

# Add executable
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})

# Include directories
include_directories(include)

# Ensure SFML is installed, but prevent its main() from being included
include(FetchContent)
FetchContent_Declare(
    SFML
    GIT_REPOSITORY https://github.com/SFML/SFML.git
    GIT_TAG 2.5.1
)

# Disable SFML's default 'sfml-main' inclusion
set(SFML_BUILD_MAIN OFF CACHE BOOL "Disable sfml-main" FORCE)
set(SFML_INCLUDE_MAIN OFF CACHE BOOL "Exclude sfml-main.cpp from the build" FORCE)
set(SFML_BUILD_EXAMPLES OFF CACHE BOOL "Disable sfml examples")
set(SFML_BUILD_TUTORIALS OFF CACHE BOOL "Disable sfml tutorials")

FetchContent_MakeAvailable(SFML)

# Link SFML libraries, excluding sfml-main
target_link_libraries(${PROJECT_NAME} sfml-graphics sfml-audio sfml-system sfml-window sfml-network)

# Install location
set(INSTALL_DIR "${CMAKE_SOURCE_DIR}/install")

# Create install directory
file(MAKE_DIRECTORY ${INSTALL_DIR})

# Copy executable
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:${PROJECT_NAME}>
    "${INSTALL_DIR}/${PROJECT_NAME}.exe"
    COMMENT "Copying ${PROJECT_NAME}.exe to install folder"
)

# Copy SFML DLLs (Debug)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:sfml-graphics>
    "${INSTALL_DIR}/$<TARGET_FILE_NAME:sfml-graphics>"
    COMMENT "Copying sfml-graphics to install folder"
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:sfml-audio>
    "${INSTALL_DIR}/$<TARGET_FILE_NAME:sfml-audio>"
    COMMENT "Copying sfml-audio to install folder"
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:sfml-system>
    "${INSTALL_DIR}/$<TARGET_FILE_NAME:sfml-system>"
    COMMENT "Copying sfml-system to install folder"
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:sfml-window>
    "${INSTALL_DIR}/$<TARGET_FILE_NAME:sfml-window>"
    COMMENT "Copying sfml-window to install folder"
)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    $<TARGET_FILE:sfml-network>
    "${INSTALL_DIR}/$<TARGET_FILE_NAME:sfml-network>"
    COMMENT "Copying sfml-network to install folder"
)

# copy openal32.dll
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
    "path/to/OpenAL32.dll"
    "${INSTALL_DIR}/OpenAL32.dll"
    COMMENT "Copying OpenAL32.dll to install folder"
)

# Copy images and sounds
file(COPY ${CMAKE_SOURCE_DIR}/images DESTINATION ${INSTALL_DIR})
file(COPY ${CMAKE_SOURCE_DIR}/sounds DESTINATION ${INSTALL_DIR})

set(OUTPUT_DIR ${CMAKE_BINARY_DIR})

# Output directory
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})